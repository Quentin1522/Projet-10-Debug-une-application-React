{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Events/index.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EventList = () => {\n  _s();\n\n  const {\n    data,\n    error\n  } = useData();\n  const [type, setType] = useState(null); // Initialise type à null\n\n  const [currentPage, setCurrentPage] = useState(1);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"An error occurred\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this); // Affiche un message d'erreur en cas d'erreur\n  }\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this); // Affiche un message de chargement si les données ne sont pas disponibles\n  }\n\n  const filteredEvents = (type ? data.events.filter(event => event.type === type) : data.events || []).filter((event, index) => {\n    if ((currentPage - 1) * PER_PAGE <= index && PER_PAGE * currentPage > index) {\n      return true;\n    }\n\n    return false;\n  });\n\n  const changeType = evtType => {\n    setCurrentPage(1);\n    setType(evtType);\n  };\n\n  const pageNumber = Math.ceil((filteredEvents.length || 0) / PER_PAGE); // Utilise Math.ceil pour arrondir vers le haut\n\n  const typeList = new Set(data.events.map(event => event.type));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"SelectTitle\",\n      children: \"Cat\\xE9gories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      selection: Array.from(typeList),\n      onChange: value => changeType(value) // Pas besoin de vérifier la valeur ici car la fonction changeType le fait déjà\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"events\",\n      className: \"ListContainer\",\n      children: filteredEvents.map(event => /*#__PURE__*/_jsxDEV(Modal, {\n        Content: /*#__PURE__*/_jsxDEV(ModalEvent, {\n          event: event\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 42\n        }, this),\n        children: _ref => {\n          let {\n            setIsOpened\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(EventCard, {\n            onClick: () => setIsOpened(true),\n            imageSrc: event.cover,\n            title: event.title,\n            date: new Date(event.date),\n            label: event.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this);\n        }\n      }, event.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Pagination\",\n      children: [...Array(pageNumber)].map((_, n) => /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#events\",\n        onClick: () => setCurrentPage(n + 1),\n        children: n + 1\n      }, n, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EventList, \"53abh5PcW2g/+k4RjTRJmUZKMtw=\", true);\n\n_c = EventList;\nexport default EventList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Events/index.js"],"names":["EventList","data","error","useData","type","setType","useState","currentPage","setCurrentPage","filteredEvents","events","filter","event","index","PER_PAGE","changeType","evtType","pageNumber","Math","ceil","length","typeList","Set","map","Array","from","value","setIsOpened","cover","title","Date","date","id","_","n"],"mappings":"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","sourcesContent":["const EventList = () => {\n  const { data, error } = useData();\n  const [type, setType] = useState(null); // Initialise type à null\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  if (error) {\n    return <div>An error occurred</div>; // Affiche un message d'erreur en cas d'erreur\n  }\n\n  if (!data) {\n    return <div>Loading...</div>; // Affiche un message de chargement si les données ne sont pas disponibles\n  }\n\n  const filteredEvents = (type ? data.events.filter(event => event.type === type) : data.events || [])\n    .filter((event, index) => {\n      if (\n        (currentPage - 1) * PER_PAGE <= index &&\n        PER_PAGE * currentPage > index\n      ) {\n        return true;\n      }\n      return false;\n    });\n\n  const changeType = (evtType) => {\n    setCurrentPage(1);\n    setType(evtType);\n  };\n\n  const pageNumber = Math.ceil((filteredEvents.length || 0) / PER_PAGE); // Utilise Math.ceil pour arrondir vers le haut\n\n  const typeList = new Set(data.events.map((event) => event.type));\n\n  return (\n    <>\n      <h3 className=\"SelectTitle\">Catégories</h3>\n      <Select\n        selection={Array.from(typeList)}\n        onChange={(value) => changeType(value)} // Pas besoin de vérifier la valeur ici car la fonction changeType le fait déjà\n      />\n      <div id=\"events\" className=\"ListContainer\">\n        {filteredEvents.map((event) => (\n          <Modal key={event.id} Content={<ModalEvent event={event} />}>\n            {({ setIsOpened }) => (\n              <EventCard\n                onClick={() => setIsOpened(true)}\n                imageSrc={event.cover}\n                title={event.title}\n                date={new Date(event.date)}\n                label={event.type}\n              />\n            )}\n          </Modal>\n        ))}\n      </div>\n      <div className=\"Pagination\">\n        {[...Array(pageNumber)].map((_, n) => (\n          <a key={n} href=\"#events\" onClick={() => setCurrentPage(n + 1)}>\n            {n + 1}\n          </a>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default EventList;"]},"metadata":{},"sourceType":"module"}