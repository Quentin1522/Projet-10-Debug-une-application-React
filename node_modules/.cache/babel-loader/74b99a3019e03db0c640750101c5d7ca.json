{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // Importation des hooks useEffect et useState de React\n\nimport { useData } from \"../../contexts/DataContext\"; // Importation du hook useData du contexte DataContext\n\nimport { getMonth } from \"../../helpers/Date\"; // Importation de la fonction getMonth depuis l'utilitaire Date\n\nimport \"./style.scss\"; // Importation du fichier de style\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slider = () => {\n  _s();\n\n  const {\n    data\n  } = useData(); // Extraction des données depuis le contexte DataContext\n\n  const [index, setIndex] = useState(0); // Déclaration d'un état pour l'index du carrousel\n  // Tri des événements par date décroissante\n\n  const byDateDesc = data !== null && data !== void 0 && data.focus ? data === null || data === void 0 ? void 0 : data.focus.sort((evtA, evtB) => new Date(evtB.date) - new Date(evtA.date)) : [];\n  useEffect(() => {\n    // Utilisation de l'effet useEffect pour gérer le changement automatique d'index\n    const interval = setInterval(() => {\n      // Définition d'un intervalle pour changer l'index automatiquement\n      setIndex(current => current < byDateDesc.length - 1 ? current + 1 : 0); // Incrémentation de l'index ou retour au début s'il atteint la fin\n    }, 5000); // Changement toutes les 5 secondes\n\n    return () => clearInterval(interval); // Nettoyage de l'intervalle lorsque le composant est démonté\n  }, [index, byDateDesc.length]); // Déclenchement de l'effet lorsque l'index ou la longueur des événements change\n\n  const handleOptionChange = e => {\n    // Gestion du changement d'option dans la pagination\n    setIndex(parseInt(e.target.value, 10)); // Mise à jour de l'index en fonction de la valeur sélectionnée\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SlideCardList\",\n    children: [byDateDesc === null || byDateDesc === void 0 ? void 0 : byDateDesc.map((event, idx // Mapping des événements pour les cartes du carrousel\n    ) => /*#__PURE__*/_jsxDEV(\"div\", {\n      // Clé unique pour chaque événement\n      className: `SlideCard SlideCard--${index === idx ? \"display\" : \"hide\" // Ajout de la classe display ou hide en fonction de l'index actuel\n      }`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: event.cover,\n        alt: \"forum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"SlideCard__descriptionContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"SlideCard__description\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: event.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: event.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getMonth(new Date(event.date))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, event.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SlideCard__paginationContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"SlideCard__pagination\",\n        children: byDateDesc.map((event, radioIdx // Mapping des événements pour les boutons de la pagination\n        ) => /*#__PURE__*/_jsxDEV(\"input\", {\n          // Clé unique pour chaque bouton\n          type: \"radio\",\n          name: \"radio-button\",\n          value: radioIdx,\n          checked: index === radioIdx // Vérification si l'index correspond au bouton\n          ,\n          onChange: handleOptionChange // Gestion du changement d'option\n\n        }, event.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Slider, \"O0IxBK3bSx2E5/5iaqD9rXSZzGQ=\", false, function () {\n  return [useData];\n});\n\n_c = Slider;\nexport default Slider; // Exportation de la composante Slider\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js"],"names":["useEffect","useState","useData","getMonth","Slider","data","index","setIndex","byDateDesc","focus","sort","evtA","evtB","Date","date","interval","setInterval","current","length","clearInterval","handleOptionChange","e","parseInt","target","value","map","event","idx","cover","title","description","id","radioIdx"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAA6C;;AAC7C,SAASC,OAAT,QAAwB,4BAAxB,C,CAAsD;;AACtD,SAASC,QAAT,QAAyB,oBAAzB,C,CAA+C;;AAC/C,OAAO,cAAP,C,CAAuB;;;;AAEvB,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAO,EAAxB,CADmB,CACS;;AAC5B,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC,CAFmB,CAEoB;AAEvC;;AACA,QAAMO,UAAU,GAAGH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAEI,KAAN,GACfJ,IADe,aACfA,IADe,uBACfA,IAAI,CAAEI,KAAN,CAAYC,IAAZ,CACE,CAACC,IAAD,EAAOC,IAAP,KAAgB,IAAIC,IAAJ,CAASD,IAAI,CAACE,IAAd,IAAsB,IAAID,IAAJ,CAASF,IAAI,CAACG,IAAd,CADxC,CADe,GAIf,EAJJ;AAMAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC;AACAT,MAAAA,QAAQ,CAAEU,OAAD,IACPA,OAAO,GAAGT,UAAU,CAACU,MAAX,GAAoB,CAA9B,GAAkCD,OAAO,GAAG,CAA5C,GAAgD,CAD1C,CAAR,CAFiC,CAI9B;AACJ,KAL2B,EAKzB,IALyB,CAA5B,CAFc,CAOJ;;AACV,WAAO,MAAME,aAAa,CAACJ,QAAD,CAA1B,CARc,CAQwB;AACvC,GATQ,EASN,CAACT,KAAD,EAAQE,UAAU,CAACU,MAAnB,CATM,CAAT,CAXmB,CAoBa;;AAEhC,QAAME,kBAAkB,GAAIC,CAAD,IAAO;AAChC;AACAd,IAAAA,QAAQ,CAACe,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,EAAiB,EAAjB,CAAT,CAAR,CAFgC,CAEQ;AACzC,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,eACGhB,UADH,aACGA,UADH,uBACGA,UAAU,CAAEiB,GAAZ,CACC,CACEC,KADF,EAEEC,GAFF,CAEM;AAFN,sBAIE;AACiB;AACf,MAAA,SAAS,EAAG,wBACVrB,KAAK,KAAKqB,GAAV,GAAgB,SAAhB,GAA4B,MADnB,CAC0B;AACpC,QAJH;AAAA,8BAME;AAAK,QAAA,GAAG,EAAED,KAAK,CAACE,KAAhB;AAAuB,QAAA,GAAG,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,wBAAf;AAAA,kCACE;AAAA,sBAAKF,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAIH,KAAK,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAM3B,QAAQ,CAAC,IAAIU,IAAJ,CAASa,KAAK,CAACZ,IAAf,CAAD;AAAd;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA,OACOY,KAAK,CAACK,EADb;AAAA;AAAA;AAAA;AAAA,YALH,CADH,eAuBE;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,kBACGvB,UAAU,CAACiB,GAAX,CACC,CACEC,KADF,EAEEM,QAFF,CAEW;AAFX,0BAIE;AACiB;AACf,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,IAAI,EAAC,cAHP;AAIE,UAAA,KAAK,EAAEA,QAJT;AAKE,UAAA,OAAO,EAAE1B,KAAK,KAAK0B,QALrB,CAK+B;AAL/B;AAME,UAAA,QAAQ,EAAEZ,kBANZ,CAMgC;;AANhC,WACOM,KAAK,CAACK,EADb;AAAA;AAAA;AAAA;AAAA,gBALH;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD,CAxED;;GAAM3B,M;UACaF,O;;;KADbE,M;AA0EN,eAAeA,MAAf,C,CAAuB","sourcesContent":["import { useEffect, useState } from \"react\"; // Importation des hooks useEffect et useState de React\nimport { useData } from \"../../contexts/DataContext\"; // Importation du hook useData du contexte DataContext\nimport { getMonth } from \"../../helpers/Date\"; // Importation de la fonction getMonth depuis l'utilitaire Date\nimport \"./style.scss\"; // Importation du fichier de style\n\nconst Slider = () => {\n  const { data } = useData(); // Extraction des données depuis le contexte DataContext\n  const [index, setIndex] = useState(0); // Déclaration d'un état pour l'index du carrousel\n\n  // Tri des événements par date décroissante\n  const byDateDesc = data?.focus\n    ? data?.focus.sort(\n        (evtA, evtB) => new Date(evtB.date) - new Date(evtA.date)\n      )\n    : [];\n\n  useEffect(() => {\n    // Utilisation de l'effet useEffect pour gérer le changement automatique d'index\n    const interval = setInterval(() => {\n      // Définition d'un intervalle pour changer l'index automatiquement\n      setIndex((current) =>\n        current < byDateDesc.length - 1 ? current + 1 : 0\n      ); // Incrémentation de l'index ou retour au début s'il atteint la fin\n    }, 5000); // Changement toutes les 5 secondes\n    return () => clearInterval(interval); // Nettoyage de l'intervalle lorsque le composant est démonté\n  }, [index, byDateDesc.length]); // Déclenchement de l'effet lorsque l'index ou la longueur des événements change\n\n  const handleOptionChange = (e) => {\n    // Gestion du changement d'option dans la pagination\n    setIndex(parseInt(e.target.value, 10)); // Mise à jour de l'index en fonction de la valeur sélectionnée\n  };\n\n  return (\n    <div className=\"SlideCardList\">\n      {byDateDesc?.map(\n        (\n          event,\n          idx // Mapping des événements pour les cartes du carrousel\n        ) => (\n          <div\n            key={event.id} // Clé unique pour chaque événement\n            className={`SlideCard SlideCard--${\n              index === idx ? \"display\" : \"hide\" // Ajout de la classe display ou hide en fonction de l'index actuel\n            }`}\n          >\n            <img src={event.cover} alt=\"forum\" />\n            <div className=\"SlideCard__descriptionContainer\">\n              <div className=\"SlideCard__description\">\n                <h3>{event.title}</h3>\n                <p>{event.description}</p>\n                <div>{getMonth(new Date(event.date))}</div>\n              </div>\n            </div>\n          </div>\n        )\n      )}\n      <div className=\"SlideCard__paginationContainer\">\n        <div className=\"SlideCard__pagination\">\n          {byDateDesc.map(\n            (\n              event,\n              radioIdx // Mapping des événements pour les boutons de la pagination\n            ) => (\n              <input\n                key={event.id} // Clé unique pour chaque bouton\n                type=\"radio\"\n                name=\"radio-button\"\n                value={radioIdx}\n                checked={index === radioIdx} // Vérification si l'index correspond au bouton\n                onChange={handleOptionChange} // Gestion du changement d'option\n              />\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Slider; // Exportation de la composante Slider"]},"metadata":{},"sourceType":"module"}