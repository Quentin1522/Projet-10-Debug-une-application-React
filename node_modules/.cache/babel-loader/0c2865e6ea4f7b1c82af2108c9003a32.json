{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Form/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Field, { FIELD_TYPES } from \"../../components/Field\";\nimport Select from \"../../components/Select\";\nimport Button, { BUTTON_TYPES } from \"../../components/Button\"; // Fonction de simulation d'appel à une API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mockContactApi = () => new Promise(resolve => setTimeout(resolve, 1000)); // Définition du composant Form\n\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    onSuccess,\n    onError,\n    setConfirmationMessage\n  } = _ref;\n  // État local pour gérer l'envoi du formulaire\n  const [sending, setSending] = useState(false); // Callback pour envoyer le formulaire\n\n  const sendContact = useCallback(async evt => {\n    evt.preventDefault();\n    setSending(true);\n    const formFields = evt.target.elements;\n    let isAnyFieldEmpty = false;\n\n    for (let i = 0; i < formFields.length; i++) {\n      if (formFields[i].nodeName === \"INPUT\" || formFields[i].nodeName === \"TEXTAREA\") {\n        if (!formFields[i].value.trim()) {\n          isAnyFieldEmpty = true;\n          break;\n        }\n      }\n    }\n\n    if (isAnyFieldEmpty) {\n      setConfirmationMessage(\"Veuillez remplir tous les champs du formulaire\");\n      setSending(false); // Mettre sending à false car l'envoi a échoué\n\n      return;\n    }\n\n    console.log(123);\n\n    try {\n      await mockContactApi();\n      setSending(false);\n      setConfirmationMessage(\"Message envoyé !\");\n      onSuccess(); // Appeler onSuccess lorsque l'envoi réussit\n    } catch (err) {\n      setSending(false);\n      onError(err); // Appeler onError en cas d'erreur\n    }\n  }, [onSuccess, onError, setConfirmationMessage]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: sendContact,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          placeholder: \"\",\n          label: \"Nom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          placeholder: \"\",\n          label: \"Pr\\xE9nom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          selection: [\"Personnel\", \"Entreprise\"],\n          onChange: () => null,\n          label: \"Personnel / Entreprise\",\n          type: \"large\",\n          titleEmpty: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          placeholder: \"\",\n          label: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: BUTTON_TYPES.SUBMIT,\n          disabled: sending,\n          children: sending ? \"En cours\" : \"Envoyer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          placeholder: \"Message\",\n          label: \"Message\",\n          type: FIELD_TYPES.TEXTAREA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}; // Validation des propriétés du composant Form\n\n\n_s(Form, \"xlCfd/hTPL1r13um4H5Lxem8mPc=\");\n\n_c = Form;\nForm.propTypes = {\n  onError: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired,\n  setConfirmationMessage: PropTypes.func.isRequired\n};\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Form/index.js"],"names":["React","useCallback","useState","PropTypes","Field","FIELD_TYPES","Select","Button","BUTTON_TYPES","mockContactApi","Promise","resolve","setTimeout","Form","onSuccess","onError","setConfirmationMessage","sending","setSending","sendContact","evt","preventDefault","formFields","target","elements","isAnyFieldEmpty","i","length","nodeName","value","trim","console","log","err","SUBMIT","TEXTAREA","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Field, { FIELD_TYPES } from \"../../components/Field\";\nimport Select from \"../../components/Select\";\nimport Button, { BUTTON_TYPES } from \"../../components/Button\";\n\n// Fonction de simulation d'appel à une API\nconst mockContactApi = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\n// Définition du composant Form\nconst Form = ({ onSuccess, onError, setConfirmationMessage }) => {\n  // État local pour gérer l'envoi du formulaire\n  const [sending, setSending] = useState(false);\n\n  // Callback pour envoyer le formulaire\n  const sendContact = useCallback(\n    async (evt) => {\n      evt.preventDefault();\n      setSending(true);\n\n      const formFields = evt.target.elements;\n      let isAnyFieldEmpty = false;\n      for (let i = 0; i < formFields.length; i++) {\n        if (formFields[i].nodeName === \"INPUT\" || formFields[i].nodeName === \"TEXTAREA\") {\n          if (!formFields[i].value.trim()) {\n            isAnyFieldEmpty = true;\n            break;\n          }\n        }\n      }\n\n      if (isAnyFieldEmpty) {\n        setConfirmationMessage(\"Veuillez remplir tous les champs du formulaire\");\n        setSending(false); // Mettre sending à false car l'envoi a échoué\n        return;\n      }\nconsole.log(123);\n      try {\n        await mockContactApi();\n        setSending(false);\n        setConfirmationMessage(\"Message envoyé !\");\n        onSuccess(); // Appeler onSuccess lorsque l'envoi réussit\n      } catch (err) {\n        setSending(false);\n        onError(err); // Appeler onError en cas d'erreur\n      }\n    },\n    [onSuccess, onError, setConfirmationMessage]\n  );\n\n  return (\n    <form onSubmit={sendContact}>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Field placeholder=\"\" label=\"Nom\" />\n          <Field placeholder=\"\" label=\"Prénom\" />\n          <Select\n            selection={[\"Personnel\", \"Entreprise\"]}\n            onChange={() => null}\n            label=\"Personnel / Entreprise\"\n            type=\"large\"\n            titleEmpty\n          />\n          <Field placeholder=\"\" label=\"Email\" />\n          <Button type={BUTTON_TYPES.SUBMIT} disabled={sending}>\n            {sending ? \"En cours\" : \"Envoyer\"}\n          </Button>\n        </div>\n        <div className=\"col\">\n          <Field\n            placeholder=\"Message\"\n            label=\"Message\"\n            type={FIELD_TYPES.TEXTAREA}\n          />\n        </div>\n      </div>\n    </form>\n  );\n};\n\n// Validation des propriétés du composant Form\nForm.propTypes = {\n  onError: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired,\n  setConfirmationMessage: PropTypes.func.isRequired,\n};\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}