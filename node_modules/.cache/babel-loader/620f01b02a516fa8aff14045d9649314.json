{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Events/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport EventCard from \"../../components/EventCard\";\nimport Select from \"../../components/Select\";\nimport { useData } from \"../../contexts/DataContext\";\nimport Modal from \"../Modal\";\nimport ModalEvent from \"../ModalEvent\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PER_PAGE = 9; // Nombre d'événements par page\n\nconst EventList = () => {\n  _s();\n\n  const {\n    data,\n    error\n  } = useData(); // Récupération des données d'événements et des erreurs à partir du contexte\n\n  const [type, setType] = useState(null); // État pour stocker le type d'événement sélectionné pour le filtrage\n\n  const [currentPage, setCurrentPage] = useState(1); // État pour stocker le numéro de la page actuelle pour la pagination\n  // Fonction appelée lorsqu'un nouveau type d'événement est sélectionné\n\n  const changeType = evtType => {\n    setCurrentPage(1); // Réinitialisation de la page actuelle à la première page\n\n    setType(evtType); // Mise à jour du type d'événement sélectionné\n  }; // Création d'un ensemble de types d'événements uniques à partir des données disponibles\n\n\n  const typeList = new Set(data === null || data === void 0 ? void 0 : data.events.map(event => event.type)); // Filtrage des événements en fonction du type sélectionné\n\n  let filteredEvents = (data === null || data === void 0 ? void 0 : data.events) || [];\n\n  if (type) {\n    filteredEvents = filteredEvents.filter(event => event.type === type);\n  } // Calcul des indices de début et de fin pour la pagination\n\n\n  const startIndex = (currentPage - 1) * PER_PAGE;\n  const endIndex = startIndex + PER_PAGE; // Sélection des événements à afficher sur la page actuelle\n\n  const paginatedEvents = filteredEvents.slice(startIndex, endIndex); // Calcul du nombre total de pages nécessaires pour paginer tous les événements filtrés\n\n  const pageNumber = Math.ceil(filteredEvents.length / PER_PAGE);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"An error occured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), data === null ? \"loading\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"SelectTitle\",\n        children: \"Cat\\xE9gories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        selection: Array.from(typeList),\n        onChange: value => changeType(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"events\",\n        className: \"ListContainer\",\n        children: paginatedEvents.map(event =>\n        /*#__PURE__*/\n        // Modal pour afficher les détails de l'événement lorsqu'il est cliqué\n        _jsxDEV(Modal, {\n          Content: /*#__PURE__*/_jsxDEV(ModalEvent, {\n            event: event\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 46\n          }, this),\n          children: _ref => {\n            let {\n              setIsOpened\n            } = _ref;\n            return (\n              /*#__PURE__*/\n              // Carte d'événement affichant les informations de base de l'événement\n              _jsxDEV(EventCard, {\n                onClick: () => setIsOpened(true),\n                imageSrc: event.cover,\n                title: event.title,\n                date: new Date(event.date),\n                label: event.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this)\n            );\n          }\n        }, event.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Pagination\",\n        children: [...Array(pageNumber)].map((_, index) => /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#events\",\n          onClick: () => setCurrentPage(index + 1),\n          children: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(EventList, \"53abh5PcW2g/+k4RjTRJmUZKMtw=\", false, function () {\n  return [useData];\n});\n\n_c = EventList;\nexport default EventList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Events/index.js"],"names":["useState","EventCard","Select","useData","Modal","ModalEvent","PER_PAGE","EventList","data","error","type","setType","currentPage","setCurrentPage","changeType","evtType","typeList","Set","events","map","event","filteredEvents","filter","startIndex","endIndex","paginatedEvents","slice","pageNumber","Math","ceil","length","Array","from","value","setIsOpened","cover","title","Date","date","id","_","index"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport EventCard from \"../../components/EventCard\";\nimport Select from \"../../components/Select\";\nimport { useData } from \"../../contexts/DataContext\";\nimport Modal from \"../Modal\";\nimport ModalEvent from \"../ModalEvent\";\n\nimport \"./style.css\";\n\nconst PER_PAGE = 9; // Nombre d'événements par page\n\nconst EventList = () => {\n  const { data, error } = useData(); // Récupération des données d'événements et des erreurs à partir du contexte\n  const [type, setType] = useState(null); // État pour stocker le type d'événement sélectionné pour le filtrage\n  const [currentPage, setCurrentPage] = useState(1); // État pour stocker le numéro de la page actuelle pour la pagination\n\n  // Fonction appelée lorsqu'un nouveau type d'événement est sélectionné\n  const changeType = (evtType) => {\n    setCurrentPage(1); // Réinitialisation de la page actuelle à la première page\n    setType(evtType); // Mise à jour du type d'événement sélectionné\n  };\n\n  // Création d'un ensemble de types d'événements uniques à partir des données disponibles\n  const typeList = new Set(data?.events.map((event) => event.type));\n\n  // Filtrage des événements en fonction du type sélectionné\n  let filteredEvents = data?.events || [];\n  if (type) {\n    filteredEvents = filteredEvents.filter((event) => event.type === type);\n  }\n\n  // Calcul des indices de début et de fin pour la pagination\n  const startIndex = (currentPage - 1) * PER_PAGE;\n  const endIndex = startIndex + PER_PAGE;\n\n  // Sélection des événements à afficher sur la page actuelle\n  const paginatedEvents = filteredEvents.slice(startIndex, endIndex);\n\n  // Calcul du nombre total de pages nécessaires pour paginer tous les événements filtrés\n  const pageNumber = Math.ceil(filteredEvents.length / PER_PAGE);\n\n  return (\n    <>\n      {error && <div>An error occured</div>}\n      {data === null ? (\n        \"loading\"\n      ) : (\n        <>\n          {/* Sélecteur pour choisir le type d'événement */}\n          <h3 className=\"SelectTitle\">Catégories</h3>\n          <Select\n            selection={Array.from(typeList)}\n            onChange={(value) => changeType(value)}\n          />\n\n          {/* Conteneur pour afficher les cartes d'événements */}\n          <div id=\"events\" className=\"ListContainer\">\n            {paginatedEvents.map((event) => (\n              // Modal pour afficher les détails de l'événement lorsqu'il est cliqué\n              <Modal key={event.id} Content={<ModalEvent event={event} />}>\n                {({ setIsOpened }) => (\n                  // Carte d'événement affichant les informations de base de l'événement\n                  <EventCard\n                    onClick={() => setIsOpened(true)}\n                    imageSrc={event.cover}\n                    title={event.title}\n                    date={new Date(event.date)}\n                    label={event.type}\n                  />\n                )}\n              </Modal>\n            ))}\n          </div>\n\n          {/* Pagination pour naviguer entre les pages d'événements */}\n          <div className=\"Pagination\">\n            {[...Array(pageNumber)].map((_, index) => (\n              <a\n                key={index}\n                href=\"#events\"\n                onClick={() => setCurrentPage(index + 1)}\n              >\n                {index + 1}\n              </a>\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EventList;"]},"metadata":{},"sourceType":"module"}