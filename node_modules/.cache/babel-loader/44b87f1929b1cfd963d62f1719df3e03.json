{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/contexts/DataContext/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport PropTypes from \"prop-types\"; //import des proptype\n\nimport { createContext, //crée un contexte\nuseCallback, //crée une fonction memoisée\nuseContext, //permet d'accéder au contexte dans un compsant\nuseEffect, //exécite un effet de bord dans un composant fonctionnel\nuseState //gère l'atat du comosant fonctionnele\n} from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext({}); // crée un contexte de donée avec une valeur par défaut vide\n\nexport const api = {\n  //définit un objet contenant une fonction asynchrone loadData pour récupérer des données\n  loadData: async () => {\n    const json = await fetch(\"/events.json\"); //effectue une requete pour récupérer des données depuis un fichier json\n\n    return json.json(); //renvoie les données au format json\n  }\n};\nexport const DataProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //défini un comosant dataProvider prenant des enfants\n  const [error, setError] = useState(null); //état pour gérer les erreurs\n\n  const [data, setData] = useState(null); //état pour stocker les données récupérér\n\n  const getData = useCallback(async () => {\n    try {\n      setData(await api.loadData()); //appelle de la fonction loadData pour obtenir les données\n    } catch (err) {\n      setError(err); //en ca d'erreur stocke l'erreur dans l'état\n    }\n  }, []); //les dépendances vides garantissent que la fonction est mémorisée\n\n  useEffect(() => {\n    //utilise useEffect pour éxécuter une action après le rendu du composant\n    if (data) return; //si les données existnt déjà ne rien faire\n\n    getData(); //sinon récupérer les données\n  });\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    value: {\n      data,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataProvider, \"4rR2GqJadMLR+qqqGCfFIzLbGUE=\");\n\n_c = DataProvider;\nDataProvider.propTypes = {\n  //définit les types de props attendus par dataProvider \n  children: PropTypes.node.isRequired //children doit être un noeud react et obligatoire\n\n};\nexport const useData = () => {\n  _s2();\n\n  return useContext(DataContext);\n}; //créer un hook personalisé pour accéder aux données\n\n_s2(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default DataContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/contexts/DataContext/index.js"],"names":["PropTypes","createContext","useCallback","useContext","useEffect","useState","DataContext","api","loadData","json","fetch","DataProvider","children","error","setError","data","setData","getData","err","propTypes","node","isRequired","useData"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB,C,CAAmC;;AACnC,SACEC,aADF,EACgB;AACdC,WAFF,EAEc;AACZC,UAHF,EAGa;AACXC,SAJF,EAIY;AACVC,QALF,CAKW;AALX,OAMO,OANP;;AAQA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC,C,CAAsC;;AAEtC,OAAO,MAAMM,GAAG,GAAG;AAAE;AACnBC,EAAAA,QAAQ,EAAE,YAAY;AACpB,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,cAAD,CAAxB,CADoB,CACsB;;AAC1C,WAAOD,IAAI,CAACA,IAAL,EAAP,CAFoB,CAED;AACpB;AAJgB,CAAZ;AAOP,OAAO,MAAME,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAAC;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CAD4C,CACH;;AACzC,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC,CAF4C,CAEL;;AACvC,QAAMY,OAAO,GAAGf,WAAW,CAAC,YAAY;AACtC,QAAI;AACFc,MAAAA,OAAO,CAAC,MAAMT,GAAG,CAACC,QAAJ,EAAP,CAAP,CADE,CAC4B;AAC/B,KAFD,CAEE,OAAOU,GAAP,EAAY;AACZJ,MAAAA,QAAQ,CAACI,GAAD,CAAR,CADY,CACE;AACf;AACF,GAN0B,EAMxB,EANwB,CAA3B,CAH4C,CASrC;;AACPd,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,QAAIW,IAAJ,EAAU,OADI,CACG;;AACjBE,IAAAA,OAAO,GAFO,CAEJ;AACX,GAHQ,CAAT;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE;AACA,IAAA,KAAK,EAAE;AACLF,MAAAA,IADK;AAELF,MAAAA;AAFK,KAFT;AAAA,cAOGD;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA1BM;;GAAMD,Y;;KAAAA,Y;AA4BbA,YAAY,CAACQ,SAAb,GAAyB;AAAC;AACxBP,EAAAA,QAAQ,EAAEZ,SAAS,CAACoB,IAAV,CAAeC,UADF,CACa;;AADb,CAAzB;AAIA,OAAO,MAAMC,OAAO,GAAG;AAAA;;AAAA,SAAMnB,UAAU,CAACG,WAAD,CAAhB;AAAA,CAAhB,C,CAA8C;;IAAxCgB,O;;AAEb,eAAehB,WAAf","sourcesContent":["import PropTypes from \"prop-types\";//import des proptype\nimport {\n  createContext,//crée un contexte\n  useCallback,//crée une fonction memoisée\n  useContext,//permet d'accéder au contexte dans un compsant\n  useEffect,//exécite un effet de bord dans un composant fonctionnel\n  useState,//gère l'atat du comosant fonctionnele\n} from \"react\";\n\nconst DataContext = createContext({});// crée un contexte de donée avec une valeur par défaut vide\n\nexport const api = { //définit un objet contenant une fonction asynchrone loadData pour récupérer des données\n  loadData: async () => {\n    const json = await fetch(\"/events.json\"); //effectue une requete pour récupérer des données depuis un fichier json\n    return json.json();//renvoie les données au format json\n  },\n};\n\nexport const DataProvider = ({ children }) => {//défini un comosant dataProvider prenant des enfants\n  const [error, setError] = useState(null);//état pour gérer les erreurs\n  const [data, setData] = useState(null);//état pour stocker les données récupérér\n  const getData = useCallback(async () => {\n    try {\n      setData(await api.loadData());//appelle de la fonction loadData pour obtenir les données\n    } catch (err) {\n      setError(err);//en ca d'erreur stocke l'erreur dans l'état\n    }\n  }, []);//les dépendances vides garantissent que la fonction est mémorisée\n  useEffect(() => {//utilise useEffect pour éxécuter une action après le rendu du composant\n    if (data) return;//si les données existnt déjà ne rien faire\n    getData();//sinon récupérer les données\n  });\n  \n  return (\n    <DataContext.Provider\n      // eslint-disable-next-line react/jsx-no-constructed-context-values\n      value={{\n        data,\n        error,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nDataProvider.propTypes = {//définit les types de props attendus par dataProvider \n  children: PropTypes.node.isRequired,//children doit être un noeud react et obligatoire\n}\n\nexport const useData = () => useContext(DataContext);//créer un hook personalisé pour accéder aux données\n\nexport default DataContext; \n"]},"metadata":{},"sourceType":"module"}