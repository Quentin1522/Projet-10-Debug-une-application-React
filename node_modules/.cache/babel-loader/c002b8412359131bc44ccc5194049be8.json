{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useData } from \"../../contexts/DataContext\";\nimport { getMonth } from \"../../helpers/Date\";\nimport \"./style.scss\"; //définition du composant slider\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slider = () => {\n  _s();\n\n  //useData pour récupérer les données du contexte\n  const {\n    data\n  } = useData(); //initialisation de l'état 'index' avec la valeur 0 et la fonction setIndex pour mettre à jour\n\n  const [index, setIndex] = useState(0); //tri des données par dates dans l'ordre décroissant pour afficher les événements par date \n\n  const byDateDesc = data === null || data === void 0 ? void 0 : data.focus.sort((evtA, evtB) => new Date(evtA.date) < new Date(evtB.date) ? -1 : 1); //Fonction qui permet de passer à la carte suivante avec un délai de 5 secondes\n\n  const nextCard = () => {\n    setTimeout(() => {\n      setIndex((index + 1) % byDateDesc.length);\n    }, 5000);\n  }; //Utilisation de useEffect pour appeler la fonction nextCard après chaque rendu du composant\n\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      nextCard();\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, [index]); // Dépendance ajoutée pour éviter les problèmes de boucle infinie\n  // Fonction pour changer de carte lorsqu'on clique sur un bouton radio\n\n  const handleChangeSlide = idx => {\n    setIndex(idx);\n  };\n\n  return (\n    /*#__PURE__*/\n    // Rendu du composant slider\n    _jsxDEV(\"div\", {\n      className: \"SlideCardList\",\n      children: byDateDesc === null || byDateDesc === void 0 ? void 0 : byDateDesc.map((event, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `SlideCard SlideCard--${index === idx ? \"display\" : \"hide\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: event.cover,\n          alt: \"forum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"SlideCard__descriptionContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"SlideCard__description\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: event.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: event.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: getMonth(new Date(event.date))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"SlideCard__paginationContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"SlideCard__pagination\",\n            children: byDateDesc.map((_, radioIdx) => /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"radio-button\",\n              checked: index === radioIdx\n            }, radioIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, event.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Slider, \"O0IxBK3bSx2E5/5iaqD9rXSZzGQ=\", false, function () {\n  return [useData];\n});\n\n_c = Slider;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js"],"names":["useEffect","useState","useData","getMonth","Slider","data","index","setIndex","byDateDesc","focus","sort","evtA","evtB","Date","date","nextCard","setTimeout","length","intervalId","setInterval","clearInterval","handleChangeSlide","idx","map","event","cover","title","description","_","radioIdx"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useData } from \"../../contexts/DataContext\";\nimport { getMonth } from \"../../helpers/Date\";\n\nimport \"./style.scss\";\n\n//définition du composant slider\nconst Slider = () => {\n  //useData pour récupérer les données du contexte\n  const { data } = useData();\n  //initialisation de l'état 'index' avec la valeur 0 et la fonction setIndex pour mettre à jour\n  const [index, setIndex] = useState(0);\n  //tri des données par dates dans l'ordre décroissant pour afficher les événements par date \n  const byDateDesc = data?.focus.sort((evtA, evtB) =>\n    new Date(evtA.date) < new Date(evtB.date) ? -1 : 1\n  );\n\n  //Fonction qui permet de passer à la carte suivante avec un délai de 5 secondes\n  const nextCard = () => {\n    setTimeout(() => {\n      setIndex((index + 1) % byDateDesc.length);\n    }, 5000);\n  };\n\n  //Utilisation de useEffect pour appeler la fonction nextCard après chaque rendu du composant\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      nextCard();\n    }, 5000);\n\n    return () => clearInterval(intervalId);\n  }, [index]); // Dépendance ajoutée pour éviter les problèmes de boucle infinie\n\n  // Fonction pour changer de carte lorsqu'on clique sur un bouton radio\n  const handleChangeSlide = (idx) => {\n    setIndex(idx);\n  };\n\n  return (\n    // Rendu du composant slider\n    <div className=\"SlideCardList\">\n      {byDateDesc?.map((event, idx) => (\n        <div key={event.title} className={`SlideCard SlideCard--${index === idx ? \"display\" : \"hide\"}`}>\n          {/* Partie correspondante à chaque carte d'événement */}\n          <img src={event.cover} alt=\"forum\" />\n          <div className=\"SlideCard__descriptionContainer\">\n            <div className=\"SlideCard__description\">\n              <h3>{event.title}</h3>\n              <p>{event.description}</p>\n              <div>{getMonth(new Date(event.date))}</div>\n            </div>\n          </div>\n          <div className=\"SlideCard__paginationContainer\">\n            <div className=\"SlideCard__pagination\">\n              {/* Boutons radio pour chaque carte */}\n              {byDateDesc.map((_, radioIdx) => (\n                <input\n                  key={radioIdx}\n                  type=\"radio\"\n                  name=\"radio-button\"\n                  checked={index === radioIdx}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Slider;"]},"metadata":{},"sourceType":"module"}