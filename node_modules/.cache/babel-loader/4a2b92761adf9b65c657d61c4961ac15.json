{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Modal/index.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport Icon from \"../../components/Icon\";\nimport \"./style.scss\"; //définition du composant modal\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    opened,\n    Content,\n    children\n  } = _ref;\n  //Déclaration de l'état local isOpened et de la fonction setIsOpened\n  const [isOpened, setIsOpened] = useState(opened);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [children({\n      isOpened,\n      setIsOpened\n    }), isOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [Content, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          \"data-testid\": \"close-modal\",\n          onClick: () => setIsOpened(false) //action pour fermer le modal lors du click sur le bouton\n          ,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}; //définiation des valeurs par défaut des props\n\n\n_s(Modal, \"dL2S0WSDlJcFU/RILwTB5gv/aUk=\");\n\n_c = Modal;\nModal.defaultProps = {\n  //par défault la modal est fermé\n  opened: false\n}; //définition des types des props attendues par le composant modal\n\nModal.propTypes = {\n  //la prop doit être un booléen\n  opened: PropTypes.bool,\n  //la prop COntent doit être un noeurd React valide et obligatoire\n  Content: PropTypes.node.isRequired,\n  //la prop children doit être une fonctionne valide et obligatoire\n  children: PropTypes.func.isRequired\n};\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Modal/index.js"],"names":["PropTypes","useState","Icon","Modal","opened","Content","children","isOpened","setIsOpened","defaultProps","propTypes","bool","node","isRequired","func"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAO,cAAP,C,CAGA;;;;;AACA,MAAMC,KAAK,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,GAAkC;AAC/C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACG,MAAD,CAAxC;AACA,sBACE;AAAA,eAEGE,QAAQ,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,CAFX,EAIGD,QAAQ,iBACP;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,mBAEGF,OAFH,eAKE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,yBAAY,aAFd;AAGE,UAAA,OAAO,EAAE,MAAMG,WAAW,CAAC,KAAD,CAH5B,CAIE;AAJF;AAAA,iCAOE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA,kBADF;AA0BD,CA7BD,C,CAgCA;;;GAhCML,K;;KAAAA,K;AAiCNA,KAAK,CAACM,YAAN,GAAqB;AACnB;AACAL,EAAAA,MAAM,EAAE;AAFW,CAArB,C,CAKA;;AACAD,KAAK,CAACO,SAAN,GAAkB;AAChB;AACAN,EAAAA,MAAM,EAAEJ,SAAS,CAACW,IAFF;AAGhB;AACAN,EAAAA,OAAO,EAAEL,SAAS,CAACY,IAAV,CAAeC,UAJR;AAKhB;AACAP,EAAAA,QAAQ,EAAEN,SAAS,CAACc,IAAV,CAAeD;AANT,CAAlB;AASA,eAAeV,KAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport Icon from \"../../components/Icon\";\nimport \"./style.scss\";\n\n\n//définition du composant modal\nconst Modal = ({ opened, Content, children }) => {\n  //Déclaration de l'état local isOpened et de la fonction setIsOpened\n  const [isOpened, setIsOpened] = useState(opened);\n  return (\n    <>\n    {/*rendu du composant enfant avec les propriétés isOpened et setIsOpened*/}\n      {children({ isOpened, setIsOpened })}\n      {/*rendu conditionnel du modal s'il est ouvert*/}\n      {isOpened && (\n        <div className=\"modal\">\n          <div className=\"content\">\n            {/*rendu du contenu passé en tant que prop Content*/}\n            {Content}\n\n            {/*bouton de fermeture du modal avec l'icône de fermeture*/}\n            <button\n              type=\"button\"\n              data-testid=\"close-modal\"\n              onClick={() => setIsOpened(false)}\n              //action pour fermer le modal lors du click sur le bouton\n            >\n              {/*affichage de l'icône de fermuture*/}\n              <Icon name=\"close\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\n\n//définiation des valeurs par défaut des props\nModal.defaultProps = {\n  //par défault la modal est fermé\n  opened: false,\n}\n\n//définition des types des props attendues par le composant modal\nModal.propTypes = {\n  //la prop doit être un booléen\n  opened: PropTypes.bool,\n  //la prop COntent doit être un noeurd React valide et obligatoire\n  Content: PropTypes.node.isRequired,\n  //la prop children doit être une fonctionne valide et obligatoire\n  children: PropTypes.func.isRequired,\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}