{"ast":null,"code":"var _jsxFileName = \"/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useData } from \"../../contexts/DataContext\";\nimport { getMonth } from \"../../helpers/Date\";\nimport \"./style.scss\"; //définition du composant slider\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Slider = () => {\n  _s();\n\n  //useData pour récupérer les donnée du contexte\n  const {\n    data\n  } = useData(); //initialisation de l'état 'index' avec la valeur 0 et la fonction setIndex pour mettre à jour\n\n  const [index, setIndex] = useState(0); //tri des données par dates dans l'ordre décroissant pour afficher les évenements par date \n\n  const byDateDesc = data === null || data === void 0 ? void 0 : data.focus.sort((evtA, evtB) => new Date(evtA.date) < new Date(evtB.date) ? -1 : 1); //Fonction qui permet de passer à la carte suivante avec un délai de 5 secondes\n\n  const nextCard = () => {\n    setTimeout( //ajout de -1 pour défiler à l'infinie\n    () => setIndex((index + 1) % byDateDesc.length ? index + 1 : 0), 5000);\n  }; //Utilisation de useEffect pour appeler la fonction nextCard après chaque rendu du composant\n\n\n  useEffect(() => {\n    nextCard();\n  });\n  return (\n    /*#__PURE__*/\n    //rendu du composant slider\n    _jsxDEV(\"div\", {\n      className: \"SlideCardList\",\n      children: byDateDesc === null || byDateDesc === void 0 ? void 0 : byDateDesc.map((event, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `SlideCard SlideCard--${index === idx ? \"display\" : \"hide\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: event.cover,\n            alt: \"forum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"SlideCard__descriptionContainer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"SlideCard__description\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: event.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: event.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: getMonth(new Date(event.date))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, event.title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"SlideCard__paginationContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"SlideCard__pagination\",\n            children: byDateDesc.map((_, radioIdx) => /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"radio-button\" //vérifie si l'index du bouton radio correspond à l'index de la carte affichée\n              ,\n              checked: idx === radioIdx\n            }, `${event.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Slider, \"O0IxBK3bSx2E5/5iaqD9rXSZzGQ=\", false, function () {\n  return [useData];\n});\n\n_c = Slider;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["/Users/quentinhorneck/Documents/Projet10/Debuggez-une-application-React.JS/src/containers/Slider/index.js"],"names":["useEffect","useState","useData","getMonth","Slider","data","index","setIndex","byDateDesc","focus","sort","evtA","evtB","Date","date","nextCard","setTimeout","length","map","event","idx","cover","title","description","_","radioIdx","id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAO,cAAP,C,CAEA;;;;;AACA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAO,EAAxB,CAFmB,CAGnB;;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC,CAJmB,CAKnB;;AACA,QAAMO,UAAU,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEI,KAAN,CAAYC,IAAZ,CAAiB,CAACC,IAAD,EAAOC,IAAP,KAClC,IAAIC,IAAJ,CAASF,IAAI,CAACG,IAAd,IAAsB,IAAID,IAAJ,CAASD,IAAI,CAACE,IAAd,CAAtB,GAA4C,CAAC,CAA7C,GAAiD,CADhC,CAAnB,CANmB,CAUnB;;AACA,QAAMC,QAAQ,GAAG,MAAM;AACrBC,IAAAA,UAAU,EACR;AACA,UAAMT,QAAQ,CAAC,CAACD,KAAK,GAAE,CAAR,IAAaE,UAAU,CAACS,MAAxB,GAAiCX,KAAK,GAAG,CAAzC,GAA6C,CAA9C,CAFN,EAGR,IAHQ,CAAV;AAKD,GAND,CAXmB,CAmBnB;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ;AACT,GAFQ,CAAT;AAGA;AAAA;AACE;AACA;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACGP,UADH,aACGA,UADH,uBACGA,UAAU,CAAEU,GAAZ,CAAgB,CAACC,KAAD,EAAQC,GAAR,kBACf;AAAA,gCAEE;AAEE,UAAA,SAAS,EAAG,wBACVd,KAAK,KAAKc,GAAV,GAAgB,SAAhB,GAA4B,MAC7B,EAJH;AAAA,kCAME;AAAK,YAAA,GAAG,EAAED,KAAK,CAACE,KAAhB;AAAuB,YAAA,GAAG,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAK,YAAA,SAAS,EAAC,iCAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,wBAAf;AAAA,sCACE;AAAA,0BAAKF,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,0BAAIH,KAAK,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE;AAAA,0BAAMpB,QAAQ,CAAC,IAAIU,IAAJ,CAASM,KAAK,CAACL,IAAf,CAAD;AAAd;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,WACOK,KAAK,CAACG,KADb;AAAA;AAAA;AAAA;AAAA,gBAFF,eAkBE;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,sBACGd,UAAU,CAACU,GAAX,CAAe,CAACM,CAAD,EAAIC,QAAJ,kBACd;AAEE,cAAA,IAAI,EAAC,OAFP;AAGE,cAAA,IAAI,EAAC,cAHP,CAIE;AAJF;AAKE,cAAA,OAAO,EAAEL,GAAG,KAAKK;AALnB,eACQ,GAAEN,KAAK,CAACO,EAAG,EADnB;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA,sBADD;AADH;AAAA;AAAA;AAAA;AAAA;AAFF;AAuCD,CA9DD;;GAAMtB,M;UAEaF,O;;;KAFbE,M;AAgEN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useData } from \"../../contexts/DataContext\";\nimport { getMonth } from \"../../helpers/Date\";\n\nimport \"./style.scss\";\n\n//définition du composant slider\nconst Slider = () => {\n  //useData pour récupérer les donnée du contexte\n  const { data } = useData();\n  //initialisation de l'état 'index' avec la valeur 0 et la fonction setIndex pour mettre à jour\n  const [index, setIndex] = useState(0);\n  //tri des données par dates dans l'ordre décroissant pour afficher les évenements par date \n  const byDateDesc = data?.focus.sort((evtA, evtB) =>\n    new Date(evtA.date) < new Date(evtB.date) ? -1 : 1\n  );\n\n  //Fonction qui permet de passer à la carte suivante avec un délai de 5 secondes\n  const nextCard = () => {\n    setTimeout(\n      //ajout de -1 pour défiler à l'infinie\n      () => setIndex((index +1) % byDateDesc.length ? index + 1 : 0),\n      5000\n    );\n  };\n\n  //Utilisation de useEffect pour appeler la fonction nextCard après chaque rendu du composant\n  useEffect(() => {\n    nextCard();\n  });\n  return (\n    //rendu du composant slider\n    <div className=\"SlideCardList\">\n      {byDateDesc?.map((event, idx) => (\n        <>\n        {/* Partie correspondante à chaque carte d'événement */}\n          <div\n            key={event.title}\n            className={`SlideCard SlideCard--${\n              index === idx ? \"display\" : \"hide\"\n            }`}\n          >\n            <img src={event.cover} alt=\"forum\" />\n            <div className=\"SlideCard__descriptionContainer\">\n              <div className=\"SlideCard__description\">\n                <h3>{event.title}</h3>\n                <p>{event.description}</p>\n                <div>{getMonth(new Date(event.date))}</div>\n                \n              </div>\n            </div>\n          </div>\n          <div className=\"SlideCard__paginationContainer\">\n            <div className=\"SlideCard__pagination\">\n              {byDateDesc.map((_, radioIdx) => (\n                <input\n                  key={`${event.id}`}\n                  type=\"radio\"\n                  name=\"radio-button\"\n                  //vérifie si l'index du bouton radio correspond à l'index de la carte affichée\n                  checked={idx === radioIdx}\n                />\n              ))}\n            </div>\n          </div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}